#include <stdio.h>
int main() {

int grid[20][20] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
int neighbour_count[20][20] = {0};
int gridNew[20][20];
int i, j, steps;
    for (i = 0; i < 20; ++i) {
        //printf("\n\n");
        for (j = 0; j < 20; ++j) {
            if (grid[i][j] == 1) {
                //printf("\t");                } else {
                //  printf("\t");                }
                int count = 0;
                for (int k = -1; k < 2; ++k) {
                    for (int l = -1; l < 2; ++l) {
                        if (grid[i - k][j - l] == 0) {
                            if (k == 0 && l == 0) {
                                neighbour_count[i][j]--;
                            }
                            neighbour_count[i][j]++;
                        }
                    }
                }
                if (grid[i][j] == 1 && (neighbour_count[i][j] == 3 || neighbour_count[i][j] == 2)) {
                    gridNew[i][j] = 0;
                } else if (grid[i][j] == 0 && neighbour_count[i][j] == 3)
                    gridNew[i][j] = 0;
                else
                    gridNew[i][j] = 1;
            }
        }
}
//    for (i = 0; i < 20; i++){
//        for(j = 0; j < 20; j++){
//            for (int k = 0; k < 8; k++){
//                if (j * 8 + k < 20)
//                    grid[i][j]=(grid[i][j] << 1) | (gridNew[i][j*8+k]);                    else                        grid[i][j]=grid[i][j] << 1;                }
//        }
//    }
        for (i = 0; i < 20; ++i) {
            for (j = 0; j < 20; ++j) {
                printf("%d ", gridNew[i][j]);
            }
            printf("\n");
        }
return 0;
    }